version: '3.8'

services:
  # Frontend Application (Staging)
  frontend-staging:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: hd-app-frontend-staging
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=staging
      - PORT=3000
      - HOSTNAME=0.0.0.0
      - NEXT_TELEMETRY_DISABLED=1
      - NODE_OPTIONS=--max-old-space-size=2048
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    restart: unless-stopped
    networks:
      - staging-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Staging)
  nginx-staging:
    image: nginx:alpine
    container_name: hd-app-nginx-staging
    ports:
      - "8002:80"
    volumes:
      - ./nginx/nginx-staging.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend-staging
    restart: unless-stopped
    networks:
      - staging-network

  # Grafana Monitoring (Staging)
  grafana-staging:
    image: grafana/grafana:latest
    container_name: hd-app-grafana-staging
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-staging123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3003
    volumes:
      - grafana-staging-storage:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - staging-network

  # Prometheus Metrics (Staging)
  prometheus-staging:
    image: prom/prometheus:latest
    container_name: hd-app-prometheus-staging
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-staging-storage:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=48h'
    restart: unless-stopped
    networks:
      - staging-network

  # Redis for Caching (Staging)
  redis-staging:
    image: redis:alpine
    container_name: hd-app-redis-staging
    ports:
      - "6381:6379"
    volumes:
      - redis-staging-storage:/data
    restart: unless-stopped
    networks:
      - staging-network
    command: redis-server --appendonly yes

networks:
  staging-network:
    driver: bridge

volumes:
  grafana-staging-storage:
  prometheus-staging-storage:
  redis-staging-storage:

