name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1

jobs:
  # ===========================================
  # LINT & TYPE CHECK
  # ===========================================
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint || true

      - name: Run TypeScript Check
        working-directory: ./frontend
        run: npx tsc --noEmit || true

  # ===========================================
  # BUILD TEST
  # ===========================================
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build Application
        working-directory: ./frontend
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets['NEXT_PUBLIC_SUPABASE_URL'] }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets['NEXT_PUBLIC_SUPABASE_ANON_KEY'] }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: frontend/.next
          retention-days: 1

  # ===========================================
  # DOCKER BUILD TEST
  # ===========================================
  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: hd-app-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===========================================
  # STAGING DEPLOYMENT (nur bei main branch)
  # ===========================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, build-test, docker-build-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging
      url: http://localhost:3002
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Deploy to Staging
        run: |
          echo "üöÄ Deploying to Staging..."
          echo "‚úÖ Staging Deployment w√ºrde hier ausgef√ºhrt"
          # docker-compose -f docker-compose.staging.yml up -d

  # ===========================================
  # PRODUCTION DEPLOYMENT (nur manuell)
  # ===========================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
    environment:
      name: production
      url: http://138.199.237.34:3000
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets['SSH_PRIVATE_KEY'] }}

      - name: Deploy to Production
        run: |
          echo "üöÄ Deploying to Production..."
          ssh -o StrictHostKeyChecking=no root@138.199.237.34 '
            cd /opt/hd-app/HD_App_chart &&
            git pull origin main &&
            docker-compose -f docker-compose.supabase.yml down &&
            docker-compose -f docker-compose.supabase.yml build --no-cache &&
            docker-compose -f docker-compose.supabase.yml up -d
          '

      - name: Health Check
        run: |
          echo "üè• Running Health Checks..."
          sleep 15
          curl -f http://138.199.237.34:3000 || exit 1
          curl -f http://138.199.237.34:3001 || exit 1
          curl -f http://138.199.237.34:9090 || exit 1
          echo "‚úÖ All Health Checks Passed!"

  # ===========================================
  # NOTIFICATION
  # ===========================================
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "‚úÖ Production Deployment erfolgreich!"
          elif [ "${{ needs.deploy-staging.result }}" == "success" ]; then
            echo "‚úÖ Staging Deployment erfolgreich!"
          else
            echo "‚ùå Deployment fehlgeschlagen!"
          fi

